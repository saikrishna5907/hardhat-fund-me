{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd4675137416e6b27864470974629f8d2d89b29802fdcade5b130e0f8dd2b5e0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1017921",
    "logsBloom": "0x
    "blockHash": "0x8c24c1106c77f51c46f2a355e8e9fc0bf728781c69f4fdae94a0c3b2f53aeea4",
    "transactionHash": "0xcd4675137416e6b27864470974629f8d2d89b29802fdcade5b130e0f8dd2b5e0",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1017921",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
  "numDeployments": 1,
  "solcInputHash": "b24401c099b6f525f175f2e0e6b4317e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Saikrishna Sangishetty\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"this contract is to demo a simple funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crowd funding\\n *  @author Saikrishna Sangishetty\\n *  @notice this contract is to demo a simple funding contract\\n *  @dev This implements price feeds as our library\\n *\\n */\\n// Get funds from users\\n// withdraw funds\\n// Set a minimum funding value in USD\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    // smart contract addresses can hold funds just like wallets\\n    address[] public s_funders; // vairable with s_ prepended are the storage variables\\n    mapping(address => uint256) public s_addressToAmountFunded;\\n\\n    address public immutable i_owner;\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _; // this is to represent to execute the rest of the code of function if above is passed.\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        // this is called immediately when ever this contract is deployed\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // what happens if someone sends this contract ETH without calling the fund function\\n    // receive()\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /**\\n     * @notice This function funds this contract\\n     */\\n    function fund() public payable {\\n        // set min amount to fund in USD\\n        //  msg.value is in terms of ETH and MINIMUM_USD in US dollar.\\n        //  How to convert and compare to validate ? this is where we use decentralized Oracles like ChainLink\\n\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Minimum value USD\\\"\\n        ); // 1e18 = 1 * 10 ** 18 == 1000000000000000000 1ETH = 1e18\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        // starting index, ending index, step amount\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        //  reset the array\\n        s_funders = new address[](0); // it resets the funders array\\n        //  actually withdraw the funds\\n\\n        // \\\"transfer\\\", the max gas fee is 2300, so if transaction need more gas this will error and reverts the transaction\\n        // payable(msg.sender).transfer(address(this/*refers the current contract i.e; FundMe*/).balance /*FundMe contract balance*/);\\n\\n        // \\\"send\\\", the max gas fee is 2300, so if transaction need more gas this will return bool false, or true if success, this wont revert\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // manual revert of transaction\\n        // require(sendSuccess, \\\"Send failed\\\");\\n\\n        // \\\"call\\\", there is cap on gas fee, it calls some other function, it returns if call to function success and the data returned by the function\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        // manual revert of transaction\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n}\\n\",\"keccak256\":\"0x87907d3d9236ec732a2bed38b767d5945386848ac58b987f3019d019f9887f6f\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // ABI (ABI is like an interface of a contract it let us know what we can do with the contract )\\r\\n        // address to get live price 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        // );\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData(); // price of ETH in usd\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    function getVersion() internal view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        );\\r\\n        return priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\\r\\n        return ethAmountInUSD;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x987c26391ee3c7b7badf7ceb890ea0b03980d228093e6de1059b6427489c3f17\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200129138038062001291833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61110b62000186600039600081816101e6015281816105ad015281816107a3015261083b015261110b6000f3fe60806040526004361061007b5760003560e01c80636b69a5921161004e5780636b69a5921461013c578063b60d428814610167578063be2693f014610171578063dba6335f1461017b5761007b565b80630ec3b027146100805780631bf6132d146100ab5780633ccfd60b146100e857806354861af7146100ff575b600080fd5b34801561008c57600080fd5b506100956101a6565b6040516100a29190610a5f565b60405180910390f35b3480156100b757600080fd5b506100d260048036038101906100cd9190610abd565b6101cc565b6040516100df9190610b03565b60405180910390f35b3480156100f457600080fd5b506100fd6101e4565b005b34801561010b57600080fd5b5061012660048036038101906101219190610b4a565b610424565b6040516101339190610b86565b60405180910390f35b34801561014857600080fd5b50610151610463565b60405161015e9190610b03565b60405180910390f35b61016f610470565b005b6101796105ab565b005b34801561018757600080fd5b50610190610839565b60405161019d9190610b86565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610269576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561031457600080828154811061028e5761028d610ba1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061030c90610bff565b91505061026c565b50600067ffffffffffffffff8111156103305761032f610c48565b5b60405190808252806020026020018201604052801561035e5781602001602082028036833780820191505090505b5060009080519060200190610374929190610939565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161039b90610ca8565b60006040518083038185875af1925050503d80600081146103d8576040519150601f19603f3d011682016040523d82523d6000602084013e6103dd565b606091505b5050905080610421576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041890610d1a565b60405180910390fd5b50565b6000818154811061043457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b6802b5e3af16b18800006104af600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461085d90919063ffffffff16565b10156104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e790610d86565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105a29190610da6565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610630576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106b357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610669575b5050505050905060005b815181101561073e5760008282815181106106db576106da610ba1565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073690610bff565b9150506106bd565b50600067ffffffffffffffff81111561075a57610759610c48565b5b6040519080825280602002602001820160405280156107885781602001602082028036833780820191505090505b506000908051906020019061079e929190610939565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107e590610ca8565b60006040518083038185875af1925050503d8060008114610822576040519150601f19603f3d011682016040523d82523d6000602084013e610827565b606091505b505090508061083557600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061086983610899565b90506000670de0b6b3a764000085836108829190610dfc565b61088c9190610e85565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108e257600080fd5b505afa1580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091a9190610f43565b5050509150506402540be400816109319190610fbe565b915050919050565b8280548282559060005260206000209081019282156109b2579160200282015b828111156109b15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610959565b5b5090506109bf91906109c3565b5090565b5b808211156109dc5760008160009055506001016109c4565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a25610a20610a1b846109e0565b610a00565b6109e0565b9050919050565b6000610a3782610a0a565b9050919050565b6000610a4982610a2c565b9050919050565b610a5981610a3e565b82525050565b6000602082019050610a746000830184610a50565b92915050565b600080fd5b6000610a8a826109e0565b9050919050565b610a9a81610a7f565b8114610aa557600080fd5b50565b600081359050610ab781610a91565b92915050565b600060208284031215610ad357610ad2610a7a565b5b6000610ae184828501610aa8565b91505092915050565b6000819050919050565b610afd81610aea565b82525050565b6000602082019050610b186000830184610af4565b92915050565b610b2781610aea565b8114610b3257600080fd5b50565b600081359050610b4481610b1e565b92915050565b600060208284031215610b6057610b5f610a7a565b5b6000610b6e84828501610b35565b91505092915050565b610b8081610a7f565b82525050565b6000602082019050610b9b6000830184610b77565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c0a82610aea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c3d57610c3c610bd0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c92600083610c77565b9150610c9d82610c82565b600082019050919050565b6000610cb382610c85565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d04600b83610cbd565b9150610d0f82610cce565b602082019050919050565b60006020820190508181036000830152610d3381610cf7565b9050919050565b7f4d696e696d756d2076616c756520555344000000000000000000000000000000600082015250565b6000610d70601183610cbd565b9150610d7b82610d3a565b602082019050919050565b60006020820190508181036000830152610d9f81610d63565b9050919050565b6000610db182610aea565b9150610dbc83610aea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610df157610df0610bd0565b5b828201905092915050565b6000610e0782610aea565b9150610e1283610aea565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e4b57610e4a610bd0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e9082610aea565b9150610e9b83610aea565b925082610eab57610eaa610e56565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ed581610eb6565b8114610ee057600080fd5b50565b600081519050610ef281610ecc565b92915050565b6000819050919050565b610f0b81610ef8565b8114610f1657600080fd5b50565b600081519050610f2881610f02565b92915050565b600081519050610f3d81610b1e565b92915050565b600080600080600060a08688031215610f5f57610f5e610a7a565b5b6000610f6d88828901610ee3565b9550506020610f7e88828901610f19565b9450506040610f8f88828901610f2e565b9350506060610fa088828901610f2e565b9250506080610fb188828901610ee3565b9150509295509295909350565b6000610fc982610ef8565b9150610fd483610ef8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561101357611012610bd0565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110505761104f610bd0565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561108d5761108c610bd0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110ca576110c9610bd0565b5b82820290509291505056fea264697066735822122094e82315095edfeacc2bb95301756c5bc9423b37915921c3bbfcce240b5d08c864736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80636b69a5921161004e5780636b69a5921461013c578063b60d428814610167578063be2693f014610171578063dba6335f1461017b5761007b565b80630ec3b027146100805780631bf6132d146100ab5780633ccfd60b146100e857806354861af7146100ff575b600080fd5b34801561008c57600080fd5b506100956101a6565b6040516100a29190610a5f565b60405180910390f35b3480156100b757600080fd5b506100d260048036038101906100cd9190610abd565b6101cc565b6040516100df9190610b03565b60405180910390f35b3480156100f457600080fd5b506100fd6101e4565b005b34801561010b57600080fd5b5061012660048036038101906101219190610b4a565b610424565b6040516101339190610b86565b60405180910390f35b34801561014857600080fd5b50610151610463565b60405161015e9190610b03565b60405180910390f35b61016f610470565b005b6101796105ab565b005b34801561018757600080fd5b50610190610839565b60405161019d9190610b86565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610269576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561031457600080828154811061028e5761028d610ba1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061030c90610bff565b91505061026c565b50600067ffffffffffffffff8111156103305761032f610c48565b5b60405190808252806020026020018201604052801561035e5781602001602082028036833780820191505090505b5060009080519060200190610374929190610939565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161039b90610ca8565b60006040518083038185875af1925050503d80600081146103d8576040519150601f19603f3d011682016040523d82523d6000602084013e6103dd565b606091505b5050905080610421576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041890610d1a565b60405180910390fd5b50565b6000818154811061043457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b6802b5e3af16b18800006104af600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461085d90919063ffffffff16565b10156104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e790610d86565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105a29190610da6565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610630576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106b357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610669575b5050505050905060005b815181101561073e5760008282815181106106db576106da610ba1565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073690610bff565b9150506106bd565b50600067ffffffffffffffff81111561075a57610759610c48565b5b6040519080825280602002602001820160405280156107885781602001602082028036833780820191505090505b506000908051906020019061079e929190610939565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107e590610ca8565b60006040518083038185875af1925050503d8060008114610822576040519150601f19603f3d011682016040523d82523d6000602084013e610827565b606091505b505090508061083557600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061086983610899565b90506000670de0b6b3a764000085836108829190610dfc565b61088c9190610e85565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108e257600080fd5b505afa1580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091a9190610f43565b5050509150506402540be400816109319190610fbe565b915050919050565b8280548282559060005260206000209081019282156109b2579160200282015b828111156109b15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610959565b5b5090506109bf91906109c3565b5090565b5b808211156109dc5760008160009055506001016109c4565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a25610a20610a1b846109e0565b610a00565b6109e0565b9050919050565b6000610a3782610a0a565b9050919050565b6000610a4982610a2c565b9050919050565b610a5981610a3e565b82525050565b6000602082019050610a746000830184610a50565b92915050565b600080fd5b6000610a8a826109e0565b9050919050565b610a9a81610a7f565b8114610aa557600080fd5b50565b600081359050610ab781610a91565b92915050565b600060208284031215610ad357610ad2610a7a565b5b6000610ae184828501610aa8565b91505092915050565b6000819050919050565b610afd81610aea565b82525050565b6000602082019050610b186000830184610af4565b92915050565b610b2781610aea565b8114610b3257600080fd5b50565b600081359050610b4481610b1e565b92915050565b600060208284031215610b6057610b5f610a7a565b5b6000610b6e84828501610b35565b91505092915050565b610b8081610a7f565b82525050565b6000602082019050610b9b6000830184610b77565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c0a82610aea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c3d57610c3c610bd0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c92600083610c77565b9150610c9d82610c82565b600082019050919050565b6000610cb382610c85565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d04600b83610cbd565b9150610d0f82610cce565b602082019050919050565b60006020820190508181036000830152610d3381610cf7565b9050919050565b7f4d696e696d756d2076616c756520555344000000000000000000000000000000600082015250565b6000610d70601183610cbd565b9150610d7b82610d3a565b602082019050919050565b60006020820190508181036000830152610d9f81610d63565b9050919050565b6000610db182610aea565b9150610dbc83610aea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610df157610df0610bd0565b5b828201905092915050565b6000610e0782610aea565b9150610e1283610aea565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e4b57610e4a610bd0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e9082610aea565b9150610e9b83610aea565b925082610eab57610eaa610e56565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ed581610eb6565b8114610ee057600080fd5b50565b600081519050610ef281610ecc565b92915050565b6000819050919050565b610f0b81610ef8565b8114610f1657600080fd5b50565b600081519050610f2881610f02565b92915050565b600081519050610f3d81610b1e565b92915050565b600080600080600060a08688031215610f5f57610f5e610a7a565b5b6000610f6d88828901610ee3565b9550506020610f7e88828901610f19565b9450506040610f8f88828901610f2e565b9350506060610fa088828901610f2e565b9250506080610fb188828901610ee3565b9150509295509295909350565b6000610fc982610ef8565b9150610fd483610ef8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561101357611012610bd0565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110505761104f610bd0565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561108d5761108c610bd0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110ca576110c9610bd0565b5b82820290509291505056fea264697066735822122094e82315095edfeacc2bb95301756c5bc9423b37915921c3bbfcce240b5d08c864736f6c63430008080033",
  "devdoc": {
    "author": "Saikrishna Sangishetty",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "this contract is to demo a simple funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
