{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\n// Get funds from users\n// withdraw funds\n// Set a minimum funding value in USD\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    // smart contract addresses can hold funds just like wallets\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    address public immutable i_owner;\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        // this is called immediately when ever this contract is deployed\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        // set min amount to fund in USD\n        //  msg.value is in terms of ETH and MINIMUM_USD in US dollar.\n        //  How to convert and compare to validate ? this is where we use decentralized Oracles like ChainLink\n\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Minimum value USD\"\n        ); // 1e18 = 1 * 10 ** 18 == 1000000000000000000 1ETH = 1e18\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        // starting index, ending index, step amount\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        //  reset the array\n        funders = new address[](0); // it resets the funders array\n        //  actually withdraw the funds\n\n        // \"transfer\", the max gas fee is 2300, so if transaction need more gas this will error and reverts the transaction\n        // payable(msg.sender).transfer(address(this/*refers the current contract i.e; FundMe*/).balance /*FundMe contract balance*/);\n\n        // \"send\", the max gas fee is 2300, so if transaction need more gas this will return bool false, or true if success, this wont revert\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // manual revert of transaction\n        // require(sendSuccess, \"Send failed\");\n\n        // \"call\", there is cap on gas fee, it calls some other function, it returns if call to function success and the data returned by the function\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        // manual revert of transaction\n        require(callSuccess, \"Call failed\");\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner, \"Sender is not owner!\");\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        _; // this is to represent to execute the rest of the code of function if above is passed.\n    }\n\n    // what happens if someone sends this contract ETH without calling the fund function\n    // receive()\n\n    receive() external payable {\n        fund();\n    }\n\n    // fallback()\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier:MIT\r\n\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // ABI (ABI is like an interface of a contract it let us know what we can do with the contract )\r\n        // address to get live price 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n        // );\r\n        (, int256 price, , , ) = priceFeed.latestRoundData(); // price of ETH in usd\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function getVersion() internal view returns (uint256) {\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n            0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n        );\r\n        return priceFeed.version();\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountInUSD;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}