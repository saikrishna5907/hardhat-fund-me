{
  "address": "0x8446D4f7bCb36Af060632953d2AAC84B16675E9d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe68bdf04877e5d2c0580b2411b3c35ea5fd6a920718978f89adf6491f9343172",
  "receipt": {
    "to": null,
    "from": "0x76093d23292B4595f395FE73aa77d408EFbcea9D",
    "contractAddress": "0x8446D4f7bCb36Af060632953d2AAC84B16675E9d",
    "transactionIndex": 9,
    "gasUsed": "877823",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2720edf046eef8adb4f84afa28baddef2bda2956f8ce11549890b26c26c76780",
    "transactionHash": "0xe68bdf04877e5d2c0580b2411b3c35ea5fd6a920718978f89adf6491f9343172",
    "logs": [],
    "blockNumber": 10972004,
    "cumulativeGasUsed": "6085966",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"],
  "numDeployments": 1,
  "solcInputHash": "97594052402571be0ef79d68d90c846e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\n// Get funds from users\\n// withdraw funds\\n// Set a minimum funding value in USD\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    // smart contract addresses can hold funds just like wallets\\n    address[] public funders;\\n    mapping(address => uint256) public addressToAmountFunded;\\n\\n    address public immutable i_owner;\\n    AggregatorV3Interface public priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        // this is called immediately when ever this contract is deployed\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        // set min amount to fund in USD\\n        //  msg.value is in terms of ETH and MINIMUM_USD in US dollar.\\n        //  How to convert and compare to validate ? this is where we use decentralized Oracles like ChainLink\\n\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Minimum value USD\\\"\\n        ); // 1e18 = 1 * 10 ** 18 == 1000000000000000000 1ETH = 1e18\\n        funders.push(msg.sender);\\n        addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        // starting index, ending index, step amount\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        //  reset the array\\n        funders = new address[](0); // it resets the funders array\\n        //  actually withdraw the funds\\n\\n        // \\\"transfer\\\", the max gas fee is 2300, so if transaction need more gas this will error and reverts the transaction\\n        // payable(msg.sender).transfer(address(this/*refers the current contract i.e; FundMe*/).balance /*FundMe contract balance*/);\\n\\n        // \\\"send\\\", the max gas fee is 2300, so if transaction need more gas this will return bool false, or true if success, this wont revert\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // manual revert of transaction\\n        // require(sendSuccess, \\\"Send failed\\\");\\n\\n        // \\\"call\\\", there is cap on gas fee, it calls some other function, it returns if call to function success and the data returned by the function\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        // manual revert of transaction\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\n        if (msg.sender != i_owner) {\\n            revert NotOwner();\\n        }\\n        _; // this is to represent to execute the rest of the code of function if above is passed.\\n    }\\n\\n    // what happens if someone sends this contract ETH without calling the fund function\\n    // receive()\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    // fallback()\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0xe14437a1e9bfcd7cff67bf630539f0e76ecf7e6e58b848317997791baaeab483\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // ABI (ABI is like an interface of a contract it let us know what we can do with the contract )\\r\\n        // address to get live price 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        // );\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData(); // price of ETH in usd\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    function getVersion() internal view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        );\\r\\n        return priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\\r\\n        return ethAmountInUSD;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x987c26391ee3c7b7badf7ceb890ea0b03980d228093e6de1059b6427489c3f17\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405162000fe838038062000fe883398181016040528101906100349190610115565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610142565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e2826100b7565b9050919050565b6100f2816100d7565b81146100fd57600080fd5b50565b60008151905061010f816100e9565b92915050565b60006020828403121561012b5761012a6100b2565b5b600061013984828501610100565b91505092915050565b60805160601c610e8062000168600039600081816102e601526105710152610e806000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e4565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107b8565b610524565b6040516100d891906107fe565b60405180910390f35b3480156100ed57600080fd5b506100f661053c565b60405161010391906107fe565b60405180910390f35b34801561011857600080fd5b50610121610549565b60405161012e9190610878565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661056f565b60405161016391906108a2565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108e9565b610593565b6040516101a091906108a2565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105d290919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610973565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102db91906109c2565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610369576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041457600080828154811061038e5761038d610a18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040c90610a47565b91505061036c565b50600067ffffffffffffffff8111156104305761042f610a90565b5b60405190808252806020026020018201604052801561045e5781602001602082028036833780820191505090505b50600090805190602001906104749291906106ae565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049b90610af0565b60006040518083038185875af1925050503d80600081146104d8576040519150601f19603f3d011682016040523d82523d6000602084013e6104dd565b606091505b5050905080610521576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051890610b51565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081815481106105a357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105de8361060e565b90506000670de0b6b3a764000085836105f79190610b71565b6106019190610bfa565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065757600080fd5b505afa15801561066b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068f9190610cb8565b5050509150506402540be400816106a69190610d33565b915050919050565b828054828255906000526020600020908101928215610727579160200282015b828111156107265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ce565b5b5090506107349190610738565b5090565b5b80821115610751576000816000905550600101610739565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107858261075a565b9050919050565b6107958161077a565b81146107a057600080fd5b50565b6000813590506107b28161078c565b92915050565b6000602082840312156107ce576107cd610755565b5b60006107dc848285016107a3565b91505092915050565b6000819050919050565b6107f8816107e5565b82525050565b600060208201905061081360008301846107ef565b92915050565b6000819050919050565b600061083e6108396108348461075a565b610819565b61075a565b9050919050565b600061085082610823565b9050919050565b600061086282610845565b9050919050565b61087281610857565b82525050565b600060208201905061088d6000830184610869565b92915050565b61089c8161077a565b82525050565b60006020820190506108b76000830184610893565b92915050565b6108c6816107e5565b81146108d157600080fd5b50565b6000813590506108e3816108bd565b92915050565b6000602082840312156108ff576108fe610755565b5b600061090d848285016108d4565b91505092915050565b600082825260208201905092915050565b7f4d696e696d756d2076616c756520555344000000000000000000000000000000600082015250565b600061095d601183610916565b915061096882610927565b602082019050919050565b6000602082019050818103600083015261098c81610950565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109cd826107e5565b91506109d8836107e5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a0d57610a0c610993565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a52826107e5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a8557610a84610993565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ada600083610abf565b9150610ae582610aca565b600082019050919050565b6000610afb82610acd565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b3b600b83610916565b9150610b4682610b05565b602082019050919050565b60006020820190508181036000830152610b6a81610b2e565b9050919050565b6000610b7c826107e5565b9150610b87836107e5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bc057610bbf610993565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c05826107e5565b9150610c10836107e5565b925082610c2057610c1f610bcb565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c4a81610c2b565b8114610c5557600080fd5b50565b600081519050610c6781610c41565b92915050565b6000819050919050565b610c8081610c6d565b8114610c8b57600080fd5b50565b600081519050610c9d81610c77565b92915050565b600081519050610cb2816108bd565b92915050565b600080600080600060a08688031215610cd457610cd3610755565b5b6000610ce288828901610c58565b9550506020610cf388828901610c8e565b9450506040610d0488828901610ca3565b9350506060610d1588828901610ca3565b9250506080610d2688828901610c58565b9150509295509295909350565b6000610d3e82610c6d565b9150610d4983610c6d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d8857610d87610993565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dc557610dc4610993565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0257610e01610993565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e3f57610e3e610993565b5b82820290509291505056fea26469706673582212207f13f2a04035dacc16679a093f1acbb96e1c9aa78cf41bbc07e912220dcdba7c64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e4565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107b8565b610524565b6040516100d891906107fe565b60405180910390f35b3480156100ed57600080fd5b506100f661053c565b60405161010391906107fe565b60405180910390f35b34801561011857600080fd5b50610121610549565b60405161012e9190610878565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661056f565b60405161016391906108a2565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108e9565b610593565b6040516101a091906108a2565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105d290919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610973565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102db91906109c2565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610369576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041457600080828154811061038e5761038d610a18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040c90610a47565b91505061036c565b50600067ffffffffffffffff8111156104305761042f610a90565b5b60405190808252806020026020018201604052801561045e5781602001602082028036833780820191505090505b50600090805190602001906104749291906106ae565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049b90610af0565b60006040518083038185875af1925050503d80600081146104d8576040519150601f19603f3d011682016040523d82523d6000602084013e6104dd565b606091505b5050905080610521576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051890610b51565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081815481106105a357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105de8361060e565b90506000670de0b6b3a764000085836105f79190610b71565b6106019190610bfa565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065757600080fd5b505afa15801561066b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068f9190610cb8565b5050509150506402540be400816106a69190610d33565b915050919050565b828054828255906000526020600020908101928215610727579160200282015b828111156107265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ce565b5b5090506107349190610738565b5090565b5b80821115610751576000816000905550600101610739565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107858261075a565b9050919050565b6107958161077a565b81146107a057600080fd5b50565b6000813590506107b28161078c565b92915050565b6000602082840312156107ce576107cd610755565b5b60006107dc848285016107a3565b91505092915050565b6000819050919050565b6107f8816107e5565b82525050565b600060208201905061081360008301846107ef565b92915050565b6000819050919050565b600061083e6108396108348461075a565b610819565b61075a565b9050919050565b600061085082610823565b9050919050565b600061086282610845565b9050919050565b61087281610857565b82525050565b600060208201905061088d6000830184610869565b92915050565b61089c8161077a565b82525050565b60006020820190506108b76000830184610893565b92915050565b6108c6816107e5565b81146108d157600080fd5b50565b6000813590506108e3816108bd565b92915050565b6000602082840312156108ff576108fe610755565b5b600061090d848285016108d4565b91505092915050565b600082825260208201905092915050565b7f4d696e696d756d2076616c756520555344000000000000000000000000000000600082015250565b600061095d601183610916565b915061096882610927565b602082019050919050565b6000602082019050818103600083015261098c81610950565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109cd826107e5565b91506109d8836107e5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a0d57610a0c610993565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a52826107e5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a8557610a84610993565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ada600083610abf565b9150610ae582610aca565b600082019050919050565b6000610afb82610acd565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b3b600b83610916565b9150610b4682610b05565b602082019050919050565b60006020820190508181036000830152610b6a81610b2e565b9050919050565b6000610b7c826107e5565b9150610b87836107e5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bc057610bbf610993565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c05826107e5565b9150610c10836107e5565b925082610c2057610c1f610bcb565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c4a81610c2b565b8114610c5557600080fd5b50565b600081519050610c6781610c41565b92915050565b6000819050919050565b610c8081610c6d565b8114610c8b57600080fd5b50565b600081519050610c9d81610c77565b92915050565b600081519050610cb2816108bd565b92915050565b600080600080600060a08688031215610cd457610cd3610755565b5b6000610ce288828901610c58565b9550506020610cf388828901610c8e565b9450506040610d0488828901610ca3565b9350506060610d1588828901610ca3565b9250506080610d2688828901610c58565b9150509295509295909350565b6000610d3e82610c6d565b9150610d4983610c6d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d8857610d87610993565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dc557610dc4610993565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0257610e01610993565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e3f57610e3e610993565b5b82820290509291505056fea26469706673582212207f13f2a04035dacc16679a093f1acbb96e1c9aa78cf41bbc07e912220dcdba7c64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
